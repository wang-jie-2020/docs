(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{425:function(t,a,e){"use strict";e.r(a);var s=e(4),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("MSDN："),a("a",{attrs:{href:"https://learn.microsoft.com/en-us/dotnet/core/diagnostics/diagnosticsource-diagnosticlistener",target:"_blank",rel:"noopener noreferrer"}},[t._v("diagnosticsource-diagnosticlistener"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("em",[t._v("诊断的意义在于提供程序运行中的状态跟踪和记录,乍一看有些类似日志.但这两者的运行目标是不一致的.")])]),t._v(" "),a("h2",{attrs:{id:"system-diagnostics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-diagnostics"}},[t._v("#")]),t._v(" System.Diagnostics")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.gitcode.com/qq_36179938/images/raw/main/1629180-20221107201119153-1956483194.png",alt:"img"}})]),t._v(" "),a("p",[t._v("诊断的结构是生产消费模型，主要的概念包括：")]),t._v(" "),a("ul",[a("li",[t._v("诊断来源---DiagnosticSource")]),t._v(" "),a("li",[t._v("诊断监听器---DiagnosticListener")]),t._v(" "),a("li",[t._v("活动---Activity")])]),t._v(" "),a("p",[a("code",[t._v("DiagnosticSource")]),t._v(" 诊断日志来源，提供接口用于写入诊断日志，是一个_抽象类_主要定义了以下方法：")]),t._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//写日志，name相当于事件名，value相当于参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否有事件订阅，一个安全性设计")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsEnabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("code",[t._v("DiagnosticListener")]),t._v(" 继承自 "),a("code",[t._v("DiagnosticSource")]),t._v("，是可观察对象的封装，需要传入name构造. 同时实现了"),a("code",[t._v("IObservable<KeyValuePair<string, object>>")]),t._v("的订阅, 也可以通过AllListeners.Subscribe接收"),a("code",[t._v("IObserver<DiagnosticListener>")]),t._v("的订阅.")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/20230515105117.png",alt:"image.png|1000*800"}})]),t._v(" "),a("p",[t._v("当然如果硬编码实现消费有点麻烦，可以通过官方包"),a("code",[t._v("Microsoft.Extensions.DiagnosticAdapter")]),t._v("简化注册过程.")]),t._v(" "),a("h2",{attrs:{id:"activity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activity"}},[t._v("#")]),t._v(" Activity")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/20230515092700.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("Activity是一个内容封装，存储诊断上下文供消费。当应用程序开始处理操作时，例如HTTP请求或队列中的任务，它会在处理请求时创建Activity以在系统中跟踪该Activity。")]),t._v(" "),a("p",[t._v("Activity中存储的上下文可以是HTTP请求路径，方法，用户代理或关联ID：所有重要信息都应与每个跟踪一起记录。当应用程序调用外部依赖关系以完成操作时，它可能需要传递一些上下文（例如，关联ID）以及依赖关系调用，以便能够关联来自多个服务的日志。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1.  Tags（标签） `IEnumerable<KeyValuePair<string, string>> Tags { get; }` \n   表示与活动一起记录的信息。标签的好例子是实例/机器名称，传入请求HTTP方法，路径，用户/用户代理等。标签**不传递**给子活动。 典型的标签用法包括添加一些自定义标签，并通过它们进行枚举以填充日志事件的有效负载。可通过`Activity AddTag(string key, string value)`添加Tag，但不支持通过Key检索标签。\n\n2.  Baggage（行李） `IEnumerable<KeyValuePair<string, string>> Baggage { get; }` \n  表示要与活动一起记录**并传递给其子项**的信息。行李的例子包括相关ID，采样和特征标记。 Baggage被序列化并与外部依赖项请求一起传递。 典型的Baggage用法包括添加一些Baggage属性，并通过它们进行枚举以填充日志事件的有效负载。 可通过`Activity AddBaggage(string key, string value)`添加Baggage。并通过`string GetBaggageItem(string key)`获取指定Key的Baggage。\n \n3.  OperationName（操作名称） `string OperationName { get; }` \n  活动名称，必须在构造函数中指定。\n  \n4.  StartTimeUtc `DateTime StartTimeUtc { get; private set; }` \n  UTC格式的启动时间，如果不指定，则在启动时默认指定为`DateTime.UtcNow`。可通过`Activity SetStartTime(DateTime startTimeUtc)`指定。\n\n5.  Duration `TimeSpan Duration { get; private set; }` \n  如果活动已停止，则代表活动持续时间，否则为0。\n\n6.  Id `string Id { get; private set; }` \n  表示特定的活动标识符。过滤特定ID可确保您仅获得与操作中特定请求相关的日志记录。该Id在活动开始时生成。Id传递给外部依赖项，并被视为新的外部活动的[ParentId]。\n\n7.  ParentId `string ParentId { get; private set; }` \n  如果活动是根据请求反序列化的，则该活动可能具有进程中的[Parent]或外部Parent。 ParentId和Id代表日志中的父子关系，并允许您关联传出和传入请求。\n\n8.  RootId `string RootId { get; private set; }` - 代表根Id\n\n9.  Current `static Activity Current { get; }` - 返回在异步调用之间流动的当前Activity。\n\n10.  Parent `Activity Parent { get; private set; }` \n  如果活动是在同一过程中从另一个活动创建的，则可以使用`Partent`获得该活动。但是，如果“活动”是根活动或父项来自流程外部，则此字段可能为null。\n\n11.  Start() `Activity Start()` \n  启动活动：设置活动的Activity.Current和Parent，生成唯一的ID并设置StartTimeUtc（如果尚未设置）。\n\n12.  Stop() `void Stop()`\n  停止活动：设置活动的Activity.Current，并使用`Activity SetEndTime(DateTime endTimeUtc)`或DateTime.UtcNow中提供的时间戳计算Duration。\n\n另外`DiagnosticSource`中也定义了两个相关方法：\n1.  StartActivity `Activity StartActivity(Activity activity, object args)` - 启动给定的Activity，并将`DiagnosticSource`事件消息写入`OperationName.Start`格式的命名事件中。\n2.  StopActivity `void StopActivity(Activity activity, object args)` - 停止给定的Activity，并将`DiagnosticSource`事件消息写入`{OperationName}.Stop`格式的命名事件中。\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);