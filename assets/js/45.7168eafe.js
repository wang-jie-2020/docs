(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{366:function(a,t,e){"use strict";e.r(t);var n=e(4),s=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"容器和上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器和上下文"}},[a._v("#")]),a._v(" 容器和上下文")]),a._v(" "),t("h2",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[a._v("#")]),a._v(" 基本概念")]),a._v(" "),t("blockquote",[t("p",[a._v("Spring 配置文件中每一个"),t("bean",[a._v("节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示，它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册 BeanDefinition 对象的方法。")])],1),a._v(" "),t("p",[a._v("IoC容器的接口类是ApplicationContext，很显然它必然继承BeanFactory对Bean规范（最基本的ioc容器的实现）进行定义。而ApplicationContext表示的是应用的上下文，除了对Bean的管理外，还至少应该包含了")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("访问资源")]),a._v("：对不同方式的Bean配置（即资源）进行加载。(实现ResourcePatternResolver接口)")]),a._v(" "),t("li",[t("strong",[a._v("国际化")]),a._v(": 支持信息源，可以实现国际化。（实现MessageSource接口）")]),a._v(" "),t("li",[t("strong",[a._v("应用事件")]),a._v(": 支持应用事件。(实现ApplicationEventPublisher接口)")])])]),a._v(" "),t("p",[t("strong",[a._v("BeanDefinition：各种Bean对象及其相互的关系")])]),a._v(" "),t("p",[t("strong",[a._v("BeanRegistry： 向IOC容器手工注册 BeanDefinition 对象的方法")])]),a._v(" "),t("p",[t("strong",[a._v("BeanFactory： 工厂模式定义了IOC容器的基本功能规范")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/spring-framework-ioc-source-71.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitcode.com/qq_36179938/images/raw/main/image-20250722151214688.png",alt:"image-20250722151214688"}})]),a._v(" "),t("h2",{attrs:{id:"registry-factory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#registry-factory"}},[a._v("#")]),a._v(" Registry & Factory")]),a._v(" "),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/5e70bcb4ff1d43b19da823fbc6e2a6d9.png",alt:"img"}}),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// BeanDefinitionRegistryPostProcessor 继承了 BeanFactoryPostProcessor")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MineBeanDefinitionRegistryPostProcessor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeanDefinitionRegistryPostProcessor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("postProcessBeanDefinitionRegistry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeanDefinitionRegistry")]),a._v(" registry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeansException")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// registry 传入的就是通过各种方式定义的BeanDefinition的集合")]),a._v("\n        \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 替换Bean的例子")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" beanName "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"someBean"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanDefinitionRegistry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("containsBeanDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n            beanDefinitionRegistry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("removeBeanDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GenericBeanDefinition")]),a._v(" newBean "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GenericBeanDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            newBean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setBeanClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AnotherBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            beanDefinitionRegistry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("registerBeanDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" newBean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("postProcessBeanFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConfigurableListableBeanFactory")]),a._v(" beanFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeansException")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// beanFactory 构建结束的factory,主要用作事件,不推荐修改")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br")])]),t("h2",{attrs:{id:"bean-生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean-生命周期"}},[a._v("#")]),a._v(" Bean 生命周期")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/spring-framework-ioc-source-102.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitcode.com/qq_36179938/images/raw/main/7e70ea485aff193dcdadace6e895242c.jpeg",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"_1-实例化-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-实例化-bean"}},[a._v("#")]),a._v(" 1 实例化 Bean")]),a._v(" "),t("p",[a._v("对于"),t("code",[a._v("BeanFactory")]),a._v("容器来说，当用户向容器请求一个尚未初始化的 Bean 或初始化 Bean 的时候，如果需要注入另一个尚未初始化的依赖，容器就会调用"),t("code",[a._v("createBean")]),a._v("进行实例化；对于"),t("code",[a._v("ApplicationContext")]),a._v("容器来说，当容器启动结束后，便实例化所有的 Bean。")]),a._v(" "),t("p",[a._v("容器通过获取"),t("code",[a._v("BeanDefinition")]),a._v("对象中的信息进行实例化。并且这一步仅仅是简单的实例化，并未进行依赖注入。 实例化对象被包装在"),t("code",[a._v("BeanWrapper")]),a._v("对象中，"),t("code",[a._v("BeanWrapper")]),a._v("提供了设置对象属性的接口，从而避免了使用反射机制设置属性。")]),a._v(" "),t("h3",{attrs:{id:"_2-设置对象属性-依赖注入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置对象属性-依赖注入"}},[a._v("#")]),a._v(" 2 设置对象属性（依赖注入）")]),a._v(" "),t("p",[a._v("实例化后的对象被封装在"),t("code",[a._v("BeanWrapper")]),a._v("对象中，并且此时对象仍然是一个原生的状态，并没有进行依赖注入。 紧接着，Spring 根据"),t("code",[a._v("BeanDefinition")]),a._v("中的信息进行依赖注入，并且通过"),t("code",[a._v("BeanWrapper")]),a._v("提供的设置属性的接口完成依赖注入。")]),a._v(" "),t("h3",{attrs:{id:"_3-注入-aware-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-注入-aware-接口"}},[a._v("#")]),a._v(" 3 注入 Aware 接口")]),a._v(" "),t("p",[a._v("紧接着，Spring 会检测该对象是否实现了"),t("code",[a._v("xxxAware")]),a._v("接口，并将相关的"),t("code",[a._v("xxxAware")]),a._v("实例注入给 Bean：")]),a._v(" "),t("ul",[t("li",[a._v("如果 Bean 实现了"),t("code",[a._v("BeanNameAware")]),a._v("接口，Spring 将 Bean 的 ID 传递给"),t("code",[a._v("setBeanName()")]),a._v("方法。实现"),t("code",[a._v("BeanNameAware")]),a._v("主要是为了通过 Bean 的引用来获得 Bean 的 ID，一般业务中是很少有用到 Bean 的 ID 的。")]),a._v(" "),t("li",[a._v("如果 Bean 实现了"),t("code",[a._v("BeanFactoryAware")]),a._v("接口，Spring 将调用"),t("code",[a._v("setBeanDactory(BeanFactory bf)")]),a._v("方法并把"),t("code",[a._v("BeanFactory")]),a._v("容器实例作为参数传入。实现"),t("code",[a._v("BeanFactoryAware")]),a._v("主要目的是为了获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等。")]),a._v(" "),t("li",[a._v("如果 Bean 实现了"),t("code",[a._v("ApplicationContextAware")]),a._v("接口，Spring 容器将调用"),t("code",[a._v("setApplicationContext(ApplicationContext ctx)")]),a._v("方法，把应用上下文作为参数传入，作用与"),t("code",[a._v("BeanFactory")]),a._v("类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用"),t("code",[a._v("setApplicationContext")]),a._v("方法时会把它自己作为"),t("code",[a._v("setApplicationContext")]),a._v("的参数传入，而 Spring 容器在调用"),t("code",[a._v("setBeanDactory")]),a._v("前需要程序员自己指定（注入）"),t("code",[a._v("setBeanDactory")]),a._v("里的参数"),t("code",[a._v("BeanFactory")]),a._v("。")])]),a._v(" "),t("h3",{attrs:{id:"_4-beanpostprocessor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-beanpostprocessor"}},[a._v("#")]),a._v(" 4 BeanPostProcessor")]),a._v(" "),t("p",[a._v("当经过上述几个步骤后，Bean 对象已经被正确构造，但如果你想要对象被使用前再进行一些自定义的处理，就可以通过"),t("code",[a._v("BeanPostProcessor")]),a._v("接口实现。 该接口提供了两个函数：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("postProcessBeforeInitialzation(Object bean, String beanName)")]),a._v("当前正在初始化的 Bean 对象会被传递进来，我们就可以对这个 Bean 作任何处理。这个函数会先于"),t("code",[a._v("InitialzationBean")]),a._v("执行，因此称为前置处理。 所有"),t("code",[a._v("Aware")]),a._v("接口的注入就是在这一步完成的。")]),a._v(" "),t("li",[t("code",[a._v("postProcessAfterInitialzation(Object bean, String beanName)")]),a._v("当前正在初始化的 Bean 对象会被传递进来，我们就可以对这个 Bean 作任何处理。这个函数会在"),t("code",[a._v("InitialzationBean")]),a._v("完成后执行，因此称为后置处理。")])]),a._v(" "),t("h3",{attrs:{id:"_5-initializingbean-与-init-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-initializingbean-与-init-method"}},[a._v("#")]),a._v(" 5 InitializingBean 与 init-method")]),a._v(" "),t("p",[a._v("当"),t("code",[a._v("BeanPostProcessor")]),a._v("的前置处理完成后就会进入本阶段。 "),t("code",[a._v("InitializingBean")]),a._v("接口只有一个函数：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("afterPropertiesSet()")])])]),a._v(" "),t("p",[a._v("这一阶段也可以在 Bean 正式构造完成前增加我们自定义的逻辑，但它与前置处理不同，由于该函数并不会把当前 Bean 对象传进来，因此在这一步没办法处理对象本身，只能增加一些额外的逻辑。 若要使用它，我们需要让 Bean 实现该接口，并把要增加的逻辑写在该函数中。然后，Spring 会在前置处理完成后检测当前 Bean 是否实现了该接口，并执行"),t("code",[a._v("afterPropertiesSet")]),a._v("函数。")]),a._v(" "),t("p",[a._v("当然，Spring 为了降低对客户代码的侵入性，给 Bean 的配置提供了"),t("code",[a._v("init-method")]),a._v("属性，该属性指定了在这一阶段需要执行的函数名。Spring 便会在初始化阶段执行我们设置的函数。"),t("code",[a._v("init-method")]),a._v("本质上仍然使用了"),t("code",[a._v("InitializingBean")]),a._v("接口。")]),a._v(" "),t("p",[t("em",[a._v("init-method 目前理解是通过xml配置bean时的一个用法,类似的还是destory")])]),a._v(" "),t("h3",{attrs:{id:"_6-disposablebean-和-destroy-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-disposablebean-和-destroy-method"}},[a._v("#")]),a._v(" 6 DisposableBean 和 destroy-method")]),a._v(" "),t("p",[a._v("如果 Bean 实现了"),t("code",[a._v("DispostbleBean")]),a._v("接口，Spring 将调用它的"),t("code",[a._v("destory")]),a._v("方法，作用与在配置文件中对 Bean 使用"),t("code",[a._v("destory-method")]),a._v("属性的作用一样，都是在 Bean 实例销毁前执行的方法。")]),a._v(" "),t("h3",{attrs:{id:"一些理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一些理解"}},[a._v("#")]),a._v(" 一些理解")]),a._v(" "),t("p",[a._v("(1) BeanDefinition -> Registry -> Factory -> BeanInstance, 其中的过程有提供一些覆写")]),a._v(" "),t("p",[a._v("​\tRegistry、Factory -> BeanDefinitionRegistryPostProcessor")]),a._v(" "),t("p",[a._v("​\tBeanInstance -> BeanPostProcessor、InitializingBean、@PostConstruct")]),a._v(" "),t("p",[a._v("(2) "),t("strong",[a._v("对于"),t("code",[a._v("ApplicationContext")]),a._v("容器来说，当容器启动结束后，便实例化所有的 Bean")])]),a._v(" "),t("h2",{attrs:{id:"bean-配置注解和使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean-配置注解和使用"}},[a._v("#")]),a._v(" Bean 配置注解和使用")]),a._v(" "),t("p",[a._v("Bean 配置的三种方式:(1)XML (2)JAVA配置 (3)注解")]),a._v(" "),t("p",[a._v("目前的主流方式是（3）+（2）配置")]),a._v(" "),t("p",[a._v("​\t注解方式：Repository、Service、Controller、Component")]),a._v(" "),t("p",[a._v("​\tJAVA配置：Configuration & Bean")]),a._v(" "),t("p",[a._v("通过注解方式使用:")]),a._v(" "),t("p",[a._v("1、@Autowired是Spring自带的，@Resource是JSR250规范实现的，@Inject是JSR330规范实现的")]),a._v(" "),t("p",[a._v("2、@Autowired、@Inject用法基本一样，不同的是@Inject没有required属性")]),a._v(" "),t("p",[a._v("3、@Autowired、@Inject是默认按照"),t("strong",[a._v("类型")]),a._v("匹配的，@Resource是按照"),t("strong",[a._v("名称")]),a._v("匹配的")]),a._v(" "),t("p",[a._v("4、@Autowired如果需要按照名称匹配需要和@Qualifier一起使用，@Inject和@Named一起使用，@Resource则通过name进行指定")]),a._v(" "),t("p",[a._v("5、其他注解")]),a._v(" "),t("p",[a._v("​\t@Scope\t需要在类上使用注解 @Scope，其 value 属性用于指定作用域（singleton、"),t("strong",[a._v("prototype")]),a._v("、request）")]),a._v(" "),t("p",[a._v("​\t@Value\t需要在属性上使用注解 @Value，该注解的 value 属性用于指定要注入的值。")]),a._v(" "),t("p",[a._v("​\t@PostConstruct\t在方法上使用 @PostConstruct 相当于初始化")])])}),[],!1,null,null,null);t.default=s.exports}}]);