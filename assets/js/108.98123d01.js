(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{431:function(t,p,v){"use strict";v.r(p);var _=v(4),r=Object(_.a)({},(function(){var t=this,p=t._self._c;return p("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[p("p",[t._v("Wireshark提供了两个过滤器：抓包过滤器 和 显示过滤器。两个过滤器的过滤思路不同:")]),t._v(" "),p("p",[t._v("​\t抓包过滤器：重点在动作，需要的包我才抓，不需要的我就不抓。")]),t._v(" "),p("p",[t._v("​\t显示过滤器：重点在数据的展示，包已经抓了，只是不显示出来。")]),t._v(" "),p("h3",{attrs:{id:"抓包过滤器"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#抓包过滤器"}},[t._v("#")]),t._v(" 抓包过滤器")]),t._v(" "),p("p",[t._v("抓包过滤器在抓包前使用，它的过滤有一个基本的语法格式：BPF语法格式。")]),t._v(" "),p("p",[t._v("1）BPF语法\nBPF（全称 Berkeley Packet Filter），中文叫伯克利封包过滤器，它有四个核心元素：类型、方向、协议 和 逻辑运算符。")]),t._v(" "),p("p",[t._v("类型Type：主机（host）、网段（net）、端口（port）")]),t._v(" "),p("p",[t._v("方向Dir：源地址（src）、目标地址（dst")]),t._v(" "),p("p",[t._v("协议Proto：各种网络协议，比如：tcp、udp、http")]),t._v(" "),p("p",[t._v("逻辑运算符：与（ && ）、或（ || ）、非（ ！）")]),t._v(" "),p("p",[t._v("四个元素可以自由组合，比如：")]),t._v(" "),p("p",[t._v("src host 192.168.31.1：抓取源IP为 192.168.31.1 的数据包\ntcp || udp：抓取 TCP 或者 UDP 协议的数据包")]),t._v(" "),p("h3",{attrs:{id:"显示过滤器"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#显示过滤器"}},[t._v("#")]),t._v(" 显示过滤器")]),t._v(" "),p("p",[t._v("显示过滤器在抓包后或者抓包的过程中使用。")]),t._v(" "),p("p",[t._v("1）语法结构")]),t._v(" "),p("p",[t._v("显示过滤器的语法包含5个核心元素：IP、端口、协议、比较运算符和逻辑运算符。")]),t._v(" "),p("p",[t._v("IP地址：ip.addr、ip.src、ip.dst")]),t._v(" "),p("p",[t._v("端口：tcp.port、tcp.srcport、tcp.dstport")]),t._v(" "),p("p",[t._v("协议：tcp、udp、http")]),t._v(" "),p("p",[t._v("比较运算符：> < == >= <= !=")]),t._v(" "),p("p",[t._v("逻辑运算符：and、or、not、xor（有且仅有一个条件被满足）")]),t._v(" "),p("p",[t._v("5个核心元素可以自由组合，比如：")]),t._v(" "),p("p",[t._v("ip.addr == 192.168.32.121：显示IP地址为 192.168.32.121 的数据包\ntcp.port == 80 ：显示端口为 80 的数据包")])])}),[],!1,null,null,null);p.default=r.exports}}]);