(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{354:function(t,v,e){"use strict";e.r(v);var s=e(4),_=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"数组和切片"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组和切片"}},[t._v("#")]),t._v(" 数组和切片")]),t._v(" "),v("h2",{attrs:{id:"简要"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简要"}},[t._v("#")]),t._v(" 简要")]),t._v(" "),v("p",[t._v("数组")]),t._v(" "),v("p",[t._v("​\tGo中的数组仍旧是一个同构的定长数据结构")]),t._v(" "),v("p",[t._v("​\t数组声明 "),v("code",[t._v("var identifier [len]type")])]),t._v(" "),v("p",[t._v("​\t数组是==值==类型，这意味着若传递的是参数是数组，再对实参赋值（比如重新初始化）是无效的")]),t._v(" "),v("p",[t._v("切片")]),t._v(" "),v("p",[t._v("​\t切片是数组的一个连续片段的引用")]),t._v(" "),v("p",[t._v("​\t切片声明 "),v("code",[t._v("var identifier []type")])]),t._v(" "),v("p",[t._v("​\t切片是引用类型,类似于其他语言中的集合,理解上参照C# List或者Java ArrayList,出于某种考虑减少了封装")]),t._v(" "),v("h2",{attrs:{id:"切片"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#切片"}},[t._v("#")]),t._v(" 切片")]),t._v(" "),v("p",[t._v("切片是数组的子集,从 "),v("code",[t._v("start")]),t._v(" 索引到 ==end-1== 索引之间的元素构成的子集这么表示:")]),t._v(" "),v("p",[v("code",[t._v("var slice1 []type = arr1[start:end]")])]),t._v(" "),v("p",[t._v("切片可以调整大小(切片重组 "),v("strong",[t._v("reslicing")]),t._v("),但必须满足新的start索引 >= 之前的start索引,一些长度概念:")]),t._v(" "),v("p",[t._v("​\t"),v("code",[t._v("len()")]),t._v(" --- 切片的长度")]),t._v(" "),v("p",[t._v("​\t\ts == s[:i] + s[i:] // i是一个整数且: 0 <= i <= len(s)")]),t._v(" "),v("p",[t._v("​\t"),v("code",[t._v("cap()")]),t._v(" --- 切片的容量")]),t._v(" "),v("p",[t._v("​\t\t切片的长度 + 数组除切片之外的长度,也就是从 "),v("code",[t._v("start")]),t._v(" 索引到数组末尾")]),t._v(" "),v("p",[t._v("​\t\tlen(s) <= cap(s)")]),t._v(" "),v("p",[t._v("​\t\ts = s[:cap(s)] 切片调整到大小上限")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/7.2_fig7.2.png",alt:"img"}})]),t._v(" "),v("h3",{attrs:{id:"用-make-创建一个切片"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#用-make-创建一个切片"}},[t._v("#")]),t._v(" 用 make() 创建一个切片")]),t._v(" "),v("p",[t._v("方法签名："),v("code",[t._v("func make([]T, len, cap)")]),t._v("，其中 "),v("code",[t._v("cap")]),t._v(" 是可选参数")]),t._v(" "),v("p",[t._v("​\t"),v("code",[t._v("slice1 := make([]type, len)")])]),t._v(" "),v("p",[t._v("make和new的不一样暂时不学,这里满足 "),v("code",[t._v("make([]int, 50, 100) == new([100]int)[0:50]")])]),t._v(" "),v("h3",{attrs:{id:"切片的复制与追加"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#切片的复制与追加"}},[t._v("#")]),t._v(" 切片的复制与追加")]),t._v(" "),v("blockquote",[v("p",[v("code",[t._v("func copy(dst, src []T) int")]),t._v(" 方法将类型为 "),v("code",[t._v("T")]),t._v(" 的切片从源地址 "),v("code",[t._v("src")]),t._v(" 拷贝到目标地址 "),v("code",[t._v("dst")]),t._v("，覆盖 "),v("code",[t._v("dst")]),t._v(" 的相关元素，并且返回拷贝的元素个数。源地址和目标地址可能会有重叠。拷贝个数是 "),v("code",[t._v("src")]),t._v(" 和 "),v("code",[t._v("dst")]),t._v(" 的长度最小值。如果 "),v("code",[t._v("src")]),t._v(" 是字符串那么元素类型就是 "),v("code",[t._v("byte")]),t._v("。如果你还想继续使用 "),v("code",[t._v("src")]),t._v("，在拷贝结束后执行 "),v("code",[t._v("src = dst")]),t._v("。")])]),t._v(" "),v("blockquote",[v("p",[v("code",[t._v("func append(s[]T, x ...T) []T")]),t._v(" 其中 "),v("code",[t._v("append()")]),t._v(" 方法将 0 个或多个具有相同类型 "),v("code",[t._v("s")]),t._v(" 的元素追加到切片后面并且返回新的切片；追加的元素必须和原切片的元素是同类型。如果 "),v("code",[t._v("s")]),t._v(" 的容量不足以存储新增元素，"),v("code",[t._v("append()")]),t._v(" 会分配新的切片来保证已有切片元素和新增元素的存储。因此，返回的切片可能已经指向一个不同的相关数组了。"),v("code",[t._v("append()")]),t._v(" 方法总是返回成功，除非系统内存耗尽了。")])]),t._v(" "),v("h3",{attrs:{id:"for-range-结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#for-range-结构"}},[t._v("#")]),t._v(" For-range 结构")]),t._v(" "),v("div",{staticClass:"language-go line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-go"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ix"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" slice1 "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br")])])])}),[],!1,null,null,null);v.default=_.exports}}]);