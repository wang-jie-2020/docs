(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{449:function(t,_,s){"use strict";s.r(_);var a=s(4),e=Object(a.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("函数参数")]),t._v(" "),_("ol",[_("li",[t._v("位置参数\n"),_("ol",[_("li",[t._v("默认参数中，L=[] 的结果有些奇特，在其他语言中不曾遇到")])])]),t._v(" "),_("li",[t._v("*args 常见....")]),t._v(" "),_("li",[t._v("**kw  莫名其妙...\n"),_("ol",[_("li",[t._v("*，关键字参数")])])])])]),t._v(" "),_("li",[_("p",[t._v("装饰器")]),t._v(" "),_("p",[t._v("@decorator 等价于 func = decorator(func)，参照aop理解其概念和执行顺序")]),t._v(" "),_("p",[t._v("函数签名 wrapper(*args,**kw) 是个约定？")]),t._v(" "),_("div",{staticClass:"language-python line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-python"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("decorator")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@functools"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wraps")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapper")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kw"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" func"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kw"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" wrapper\n\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" decorator\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br"),_("span",{staticClass:"line-number"},[t._v("9")]),_("br")])])]),t._v(" "),_("li",[_("p",[t._v("偏函数")]),t._v(" "),_("p",[t._v("类似static extentions")])])]),t._v(" "),_("h2",{attrs:{id:"oop"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#oop"}},[t._v("#")]),t._v(" OOP")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("实例并不像静态语言那样'继承'类属性，比如在静态语言中类必须实例化才有对象的概念，非静态的成员是无法被直接访问的，但在python中更像一种copy\n个人理解：\n(1)继承实际上就是绑定了一个当前实例的dict -> 类的dict\n(2)如果实例新增或重写属性那么就新增实例的dict中的属性，否则就直接链向类的dict")])]),t._v(" "),_("li",[_("p",[t._v("封装")]),t._v(" "),_("p",[t._v("(1) 由于按照约定命名的设置可访问性，"),_("code",[t._v("_")]),t._v("以及"),_("code",[t._v("__")]),t._v(" 会有各自不用含义，通常来说表示私有是"),_("code",[t._v("_")]),t._v("，特殊用途"),_("code",[t._v("__")])]),t._v(" "),_("p",[t._v("(2) 构造控制 和 属性控制")]),t._v(" "),_("p",[t._v("​\t"),_("code",[t._v("__init__(self,a,b)")]),t._v("  参构造理解,必须是如此形式,self 指向实例对象\n​\t"),_("code",[t._v("__slots__")]),t._v(" 有点类似于编译检查,看起来很像是约束类实例的属性(注意仅当前类),更深入的解释是为了节省内存 --\x3e 内部的__dict__ 转向了 tuple；")]),t._v(" "),_("p",[t._v("(3) @property 以及 @xxx.setter 相比而言更偏向于按照C#的字段&属性去理解，虽然形式上更类似于字段+方法；这么说是因为它切换平滑性很像，比如name属性初始无要求，后续有校验要求，那么在外部代码其实上不需要改成getName()这种形式，没错就是在吐槽java。")]),t._v(" "),_("p",[t._v("我觉得可以这么去理解"),_("code",[t._v("__slots__")]),t._v("和@property的使用场景：\n"),_("code",[t._v("__slots__")]),t._v(" 就是一个封装概念，即关注此就可以，其他的是封装细节属性不必管；子类中 "),_("code",[t._v("__slots__=()")]),t._v(" 也许是个好习惯?\n@property 主要描述的是一种校验（私有属性通过方法传播出去不是目的）\n这两者中应用的属性范围是不一致的，保留"),_("code",[t._v("__slots__")]),t._v("按照规范不该定义_name而应该定义name，因为_name在习惯上认为是私有的\n同样的道理，@property的方法名应该是name，return _name")])]),t._v(" "),_("li",[_("p",[t._v("继承")]),t._v(" "),_("p",[t._v("Python的“file-like object“就是一种鸭子类型。")]),t._v(" "),_("p",[t._v("多重继承 和 单一继承 对‘继承’的概念理解并无二致，大概率自己写代码用到它也不会冲突。")]),t._v(" "),_("p",[t._v("多重继承的顺序性见：https://www.jianshu.com/p/c9a0b055947b")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th"),t._v(" "),_("th"),t._v(" "),_("th")])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("code",[t._v("__new__（）")])]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("__init__（）")])]),t._v(" "),_("td",[t._v("构造器")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("__slots__")])]),t._v(" "),_("td",[t._v("限制实例的属性"),_("br"),t._v("1.限制当前类而非子类"),_("br"),t._v("2.子类若延续限制也必须定义,实际参数或直接()")]),t._v(" "),_("td",[_("code",[t._v("__slots__")]),t._v("= ()")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("__str__()")]),t._v(" "),_("br"),_("code",[t._v("__repr__()")])]),t._v(" "),_("td",[t._v("相当于toString()方法")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("__iter__()")]),_("br"),_("code",[t._v("__next__()")])]),t._v(" "),_("td",[t._v("迭代器")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("__getitem__()")]),_("br"),_("code",[t._v("__setitem__()")])]),t._v(" "),_("td",[t._v("索引器")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("__getattr__()")])]),t._v(" "),_("td",[t._v("动态情况(链式调用?)")]),t._v(" "),_("td",[t._v("Chain().status.user.timeline.list "),_("br"),t._v("-> '/status/user/timeline/list'")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("__call__()")])]),t._v(" "),_("td",[t._v("大概如同func{}()？")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[_("code",[t._v("@property")])]),t._v(" "),_("td",[t._v("让get方法支持属性访问,注意命名上和属性区分")]),t._v(" "),_("td",[_("img",{attrs:{src:"C:%5CUsers%5Cjie.wang21%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250716184051520.png",alt:"image-20250716184051520"}})])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("@score.setter")])]),t._v(" "),_("td",[t._v("让set方法支持属性访问,注意命名上和属性区分")]),t._v(" "),_("td",[_("img",{attrs:{src:"https://raw.gitcode.com/qq_36179938/images/raw/main/image-20250716184044103.png",alt:"image-20250716184044103"}})])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);