(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{368:function(t,n,s){"use strict";s.r(n);var a=s(4),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"ioc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[t._v("#")]),t._v(" ioc")]),t._v(" "),n("h2",{attrs:{id:"一、bean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、bean"}},[t._v("#")]),t._v(" 一、Bean")]),t._v(" "),n("p",[t._v("Bean配置的三种方式:(1)XML (2)JAVA配置 (3)注解")]),t._v(" "),n("p",[t._v("目前的主流方式是（3）+（2）配置")]),t._v(" "),n("p",[t._v("​\t注解方式：@Repository、@Service、@Controller、@Component")]),t._v(" "),n("p",[t._v("​\tJAVA配置：@Configuration & @Bean")]),t._v(" "),n("p",[t._v("Bean通过注解方式使用:")]),t._v(" "),n("p",[t._v("1、@Autowired是Spring自带的，@Resource是JSR250规范实现的，@Inject是JSR330规范实现的")]),t._v(" "),n("p",[t._v("2、@Autowired、@Inject用法基本一样，不同的是@Inject没有required属性")]),t._v(" "),n("p",[t._v("3、@Autowired、@Inject是默认按照类型匹配的，@Resource是按照名称匹配的")]),t._v(" "),n("p",[t._v("4、@Autowired如果需要按照名称匹配需要和@Qualifier一起使用，@Inject和@Named一起使用，@Resource则通过name进行指定")]),t._v(" "),n("p",[t._v("5、其他注解")]),t._v(" "),n("p",[t._v("​\t@Scope\t需要在类上使用注解 @Scope，其 value 属性用于指定作用域（singleton、"),n("strong",[t._v("prototype")]),t._v("、request）")]),t._v(" "),n("p",[t._v("​\t@Value\t需要在属性上使用注解 @Value，该注解的 value 属性用于指定要注入的值。")]),t._v(" "),n("p",[t._v("​\t@PostConstruct\t在方法上使用 @PostConstruct 相当于初始化")]),t._v(" "),n("h2",{attrs:{id:"二、上下文和容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、上下文和容器"}},[t._v("#")]),t._v(" 二、上下文和容器")]),t._v(" "),n("blockquote",[n("p",[t._v("Spring 配置文件中每一个"),n("bean",[t._v("节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示，它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册 BeanDefinition 对象的方法。")])],1)]),t._v(" "),n("p",[n("strong",[t._v("BeanDefinition：各种Bean对象及其相互的关系")])]),t._v(" "),n("p",[n("strong",[t._v("BeanRegistry： 向IOC容器手工注册 BeanDefinition 对象的方法")])]),t._v(" "),n("p",[n("strong",[t._v("BeanFactory： 工厂模式定义了IOC容器的基本功能规范")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/spring-framework-ioc-source-2.png",alt:"img"}})]),t._v(" "),n("blockquote",[n("p",[t._v("IoC容器的接口类是ApplicationContext，很显然它必然继承BeanFactory对Bean规范（最基本的ioc容器的实现）进行定义。而ApplicationContext表示的是应用的上下文，除了对Bean的管理外，还至少应该包含了")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("访问资源")]),t._v("：对不同方式的Bean配置（即资源）进行加载。(实现ResourcePatternResolver接口)")]),t._v(" "),n("li",[n("strong",[t._v("国际化")]),t._v(": 支持信息源，可以实现国际化。（实现MessageSource接口）")]),t._v(" "),n("li",[n("strong",[t._v("应用事件")]),t._v(": 支持应用事件。(实现ApplicationEventPublisher接口)")])])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/spring-framework-ioc-source-71.png",alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/spring-framework-ioc-source-51.png",alt:"img"}})]),t._v(" "),n("h3",{attrs:{id:"_2-1-applicationcontext"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-applicationcontext"}},[t._v("#")]),t._v(" 2.1 ApplicationContext")]),t._v(" "),n("p",[t._v("一、ApplicationContext也是一个可注入对象")]),t._v(" "),n("p",[t._v("​\t1.直接通过注解注入ApplicationContext类型")]),t._v(" "),n("p",[t._v("​\t2.实现ApplicationContextAware")]),t._v(" "),n("p",[t._v("二、一些API")]),t._v(" "),n("p",[t._v("2.1 指定基类型的多个实现")]),t._v(" "),n("p",[t._v("​\t"),n("T",[t._v(" Map<String, T> getBeansOfType(@Nullable Class"),n("T",[t._v(" var1);\n2.2 Bean上的注解")])],1)],1),t._v(" "),n("p",[t._v("​\t"),n("A",{attrs:{extends:"",Annotation:""}},[t._v(" A findAnnotationOnBean(String var1, Class"),n("A",[t._v(" var2);")])],1)],1),t._v(" "),n("h2",{attrs:{id:"三、过程详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、过程详解"}},[t._v("#")]),t._v(" 三、过程详解")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/spring-framework-ioc-source-102.png",alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/5e70bcb4ff1d43b19da823fbc6e2a6d9.png",alt:"img"}})]),t._v(" "),n("p",[t._v("3.1 替换Bean的例子")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnotherBeanDefinitionRegistryPostAccessor")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinitionRegistryPostProcessor")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanDefinitionRegistry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinitionRegistry")]),t._v(" beanDefinitionRegistry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"someBean"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanDefinitionRegistry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsBeanDefinition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            beanDefinitionRegistry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeBeanDefinition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GenericBeanDefinition")]),t._v(" newBean "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GenericBeanDefinition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            newBean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setBeanClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnotherBean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            beanDefinitionRegistry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerBeanDefinition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newBean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" configurableListableBeanFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("p",[t._v("3.2 Bean实例化后触发执行方法")]),t._v(" "),n("p",[t._v("实现InitializingBean接口并且重写afterPropertiesSet()，且bean要注册到Spring容器中，那么bean在实例化、属性注入后，重写的afterPropertiesSet()就会触发执行。")]),t._v(" "),n("p",[t._v("一个例子是在web项目中"),n("em",[t._v("Anonymous"),n("strong",[t._v("注解允许匿名访问的")]),t._v("url")]),t._v("(参见ruoyi PermitAllUrlProperties)")])])}),[],!1,null,null,null);n.default=e.exports}}]);