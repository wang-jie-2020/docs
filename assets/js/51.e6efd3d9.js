(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{342:function(e,v,t){"use strict";t.r(v);var _=t(1),o=Object(_.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"mvc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" mvc")]),e._v(" "),v("h2",{attrs:{id:"_1-配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置"}},[e._v("#")]),e._v(" 1.配置")]),e._v(" "),v("h3",{attrs:{id:"_1-1-boot配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-boot配置"}},[e._v("#")]),e._v(" 1.1.boot配置")]),e._v(" "),v("p",[e._v("@ImportResource(XML的BEAN配置)")]),e._v(" "),v("p",[e._v("@PropertySource(指定引入properties文件,spring.config.import=optional:file:./dev.properties)")]),e._v(" "),v("p",[e._v('@ConfigurationProperties(prefix = "")')]),e._v(" "),v("p",[e._v("@RestController(@Controller + @ResponseBody)")]),e._v(" "),v("p",[e._v('@Profile("dev")(spring.config.activate.on-profile=dev,spring.profiles.active=dev)')]),e._v(" "),v("p",[v("strong",[e._v("@Conditional")])]),e._v(" "),v("p",[e._v("指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("@Conditional派生注解")]),e._v(" "),v("th",[e._v("作用（判断是否满足当前指定条件）")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("@ConditionalOnJava")]),e._v(" "),v("td",[e._v("系统的java版本是否符合要求")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnBean")]),e._v(" "),v("td",[e._v("容器中存在指定Bean")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnMissBean")]),e._v(" "),v("td",[e._v("容器中不存在指定Bean")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnExpression")]),e._v(" "),v("td",[e._v("满足spEL表达式")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnClass")]),e._v(" "),v("td",[e._v("系统中有指定的类")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnMissClass")]),e._v(" "),v("td",[e._v("系统中没有指定的类")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnSingleCandidate")]),e._v(" "),v("td",[e._v("容器中只有一个指定的Bean,或者这个Bean是首选Bean")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnProperty")]),e._v(" "),v("td",[e._v("系统中指定的属性是否有指定的值")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnResource")]),e._v(" "),v("td",[e._v("类路径下是否存在指定的资源文件")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnWebApplication")]),e._v(" "),v("td",[e._v("当前是web环境")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnNotWebApplication")]),e._v(" "),v("td",[e._v("当前不是web环境")])]),e._v(" "),v("tr",[v("td",[e._v("@ConditionalOnJndi")]),e._v(" "),v("td",[e._v("JNDI存在指定项")])])])]),e._v(" "),v("h3",{attrs:{id:"_1-2-webmvcconfigurer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-webmvcconfigurer"}},[e._v("#")]),e._v(" 1.2.WebMvcConfigurer")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("方法")]),e._v(" "),v("th",[e._v("描述")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[v("code",[e._v("configurePathMatch")])]),e._v(" "),v("td",[e._v("帮助配置 "),v("code",[e._v("HandlerMapping")]),e._v(" 路径匹配选项，例如是否使用已解析的 "),v("code",[e._v("PathPatterns")]),e._v(" 或与 "),v("code",[e._v("PathMatcher")]),e._v(" 匹配的字符串模式，是否匹配尾部斜杠等。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("configureContentNegotiation")])]),e._v(" "),v("td",[e._v("配置内容协商选项。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("configureAsyncSupport")])]),e._v(" "),v("td",[e._v("配置异步请求处理选项。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("configureDefaultServletHandling")])]),e._v(" "),v("td",[e._v("配置处理器以通过转发到 Servlet 容器的 “default” servlet 来委派未处理的请求。一个常见的用例是当 "),v("code",[e._v("DispatcherServlet")]),e._v(" 映射到 "),v("code",[e._v('""')]),e._v(" 从而覆盖 Servlet 容器对静态资源的默认处理时。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("addFormatters")])]),e._v(" "),v("td",[e._v("除了默认注册的 "),v("code",[e._v("Converter")]),e._v(" 和 "),v("code",[e._v("Formatter")]),e._v(" 之外，再添加其他的")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("addInterceptors")])]),e._v(" "),v("td",[e._v("添加 Spring MVC 生命周期拦截器，用于控制器方法调用和资源处理器请求的预处理和后处理。可以注册拦截器以应用于所有请求或仅限于 URL 模式的子集。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("addResourceHandlers")])]),e._v(" "),v("td",[e._v("添加处理器以从 Web 应用程序根目录、类路径等的特定位置提供静态资源，例如图像、js 和 css 文件。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("addCorsMappings")])]),e._v(" "),v("td",[e._v("配置“全局”跨域请求处理。配置的 CORS 映射适用于带注解的控制器、功能端点和静态资源。 带注解的控制器可以通过 "),v("code",[e._v("@CrossOrigin")]),e._v(" 进一步声明更细粒度的配置。在这种情况下，此处声明的“全局” CORS 配置与控制器方法上定义的本地 CORS 配置相结合。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("addViewControllers")])]),e._v(" "),v("td",[e._v("配置预先配置有响应状态代码或视图的简单自动化控制器以呈现响应正文。这在不需要自定义控制器逻辑的情况下很有用——例如呈现主页、执行简单的站点 URL 重定向、返回带有 HTML 内容的 404 状态、无内容的 204 状态等等。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("configureViewResolvers")])]),e._v(" "),v("td",[e._v("配置视图解析器以将从控制器返回的基于字符串的视图名称转换为具体的 "),v("code",[e._v("org.springframework.web.servlet.View")]),e._v(" 实现以执行渲染。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("addArgumentResolvers")])]),e._v(" "),v("td",[e._v("添加解析器以支持自定义控制器方法参数类型。这不会覆盖对解析处理器方法参数的内置支持。要自定义对参数解析的内置支持，请直接配置 "),v("code",[e._v("RequestMappingHandlerAdapter")])])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("addReturnValueHandlers")])]),e._v(" "),v("td",[e._v("添加处理程序以支持自定义控制器方法返回值类型。使用此选项不会覆盖对处理返回值的内置支持。要自定义处理返回值的内置支持，请直接配置 "),v("code",[e._v("RequestMappingHandlerAdapter")])])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("configureMessageConverters")])]),e._v(" "),v("td",[e._v("配置 "),v("code",[e._v("HttpMessageConverter")]),e._v(" 以读取请求正文和写入响应正文。 默认情况下，只要类路径中存在相应的三方库（例如 Jackson JSON、JAXB2 等），就会配置所有内置转换器。 注意使用此方法会关闭默认转换器注册。或者，使用 "),v("code",[e._v("extendMessageConverters(List)")]),e._v(" 修改该默认转换器列表。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("extendMessageConverters")])]),e._v(" "),v("td",[e._v("使用默认列表配置或初始化后，扩展或修改转换器列表。 请注意，转换器注册的顺序很重要。特别是在客户端接受 "),v("code",[e._v("org.springframework.http.MediaType.ALL")]),e._v(" 的情况下，之前配置的转换器将是首选。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("configureHandlerExceptionResolvers")])]),e._v(" "),v("td",[e._v("配置异常解析器。 给定的列表开始为空。如果它留空，框架会配置一组默认的解析器，请参阅 "),v("code",[e._v("WebMvcConfigurationSupport.addDefaultHandlerExceptionResolvers(List, org.springframework.web.accept.ContentNegotiationManager)")]),e._v(" 。或者，如果将任何异常解析器添加到列表中，则应用程序有效地接管并且必须提供完全初始化的异常解析器。 或者，您可以使用 "),v("code",[e._v("extendHandlerExceptionResolvers(List)")]),e._v(" ，它允许您扩展或修改默认配置的异常解析器列表。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("extendHandlerExceptionResolvers")])]),e._v(" "),v("td",[e._v("扩展或修改默认配置的异常解析器列表。这对于插入自定义异常解析器而不干扰默认异常解析器很有用。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("getValidator")])]),e._v(" "),v("td",[e._v("提供自定义验证器，而不是默认创建的验证器。假设 JSR-303 在类路径上，默认实现是："),v("code",[e._v("org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean")]),e._v(" 。 将返回值保留为 "),v("code",[e._v("null")]),e._v(" 以保持默认值。")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("getMessageCodesResolver")])]),e._v(" "),v("td",[e._v("提供自定义 "),v("code",[e._v("MessageCodesResolver")]),e._v(" 用于从数据绑定和验证错误代码构建消息代码。 将返回值保留为 "),v("code",[e._v("null")]),e._v(" 以保持默认值。")])])])]),e._v(" "),v("blockquote",[v("p",[v("strong",[v("code",[e._v("WebMvcConfigurer")]),e._v(" 实现是怎么影响 Spring MVC 配置的")])]),e._v(" "),v("p",[v("strong",[v("code",[e._v("WebMvcConfigurationSupport")]),e._v(" 类中定义了所有与 "),v("code",[e._v("WebMvcConfigurer")]),e._v(" 接口完全相同的 "),v("code",[e._v("protected")]),e._v(" 方法，但是又没有实现接口的关系，容易造成迷惑")])]),e._v(" "),v("p",[v("code",[e._v("DelegatingWebMvcConfiguration")]),e._v(" 继承 "),v("code",[e._v("WebMvcConfigurationSupport")]),e._v(" 类，并包含字段 "),v("code",[e._v("WebMvcConfigurerComposite configurers")]),e._v(" ，将这两者联系起来了。")]),e._v(" "),v("p",[v("code",[e._v("WebMvcConfigurerComposite")]),e._v(" 包含字段 "),v("code",[e._v("List delegates")]),e._v(" ，用来组合容器中所有的 "),v("code",[e._v("WebMvcConfigurer")]),e._v(" 实现。")]),e._v(" "),v("p",[v("code",[e._v("WebMvcConfigurationSupport")]),e._v(" 类中定义的 "),v("code",[e._v("@Bean")]),e._v(" 方法会调用与 "),v("code",[e._v("WebMvcConfigurer")]),e._v(" 接口完全相同的 "),v("code",[e._v("protected")]),e._v(" 方法进行配置，"),v("code",[e._v("DelegatingWebMvcConfiguration")]),e._v(" 继承这些 "),v("code",[e._v("protected")]),e._v(" 方法，并委托给 "),v("code",[e._v("WebMvcConfigurerComposite configurers")]),e._v(" ，所以容器中定义的 "),v("code",[e._v("WebMvcConfigurer")]),e._v(" 实现会参与到 "),v("code",[e._v("WebMvcConfigurationSupport")]),e._v(" 类中定义的 "),v("code",[e._v("@Bean")]),e._v(" 方法定义，从而影响 Spring MVC 配置")]),e._v(" "),v("p",[e._v("Spring Boot 自动配置默认提供了 1 个 "),v("code",[e._v("WebMvcConfigurer")]),e._v(" 实现")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter")])])]),e._v(" "),v("p",[e._v("将 "),v("code",[e._v("WebMvcConfigurer")]),e._v(" 接口的实现类放入 "),v("code",[e._v("DelegatingWebMvcConfiguration#configurers")]),e._v(" 的时机")]),e._v(" "),v("ul",[v("li",[e._v("实例化配置类 "),v("code",[e._v("WebMvcAutoConfiguration.EnableWebMvcConfiguration")]),e._v(" 时")]),e._v(" "),v("li",[e._v("继承了配置类 "),v("code",[e._v("DelegatingWebMvcConfiguration")])]),e._v(" "),v("li",[e._v("属性赋值 "),v("code",[e._v("DelegatingWebMvcConfiguration#setConfigurers")]),e._v(" ，将 "),v("code",[e._v("WebMvcConfigurer")]),e._v(" 接口的实现类添加到 "),v("code",[e._v("WebMvcConfigurerComposite configurers")])])])]),e._v(" "),v("h3",{attrs:{id:"_1-3-aop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-aop"}},[e._v("#")]),e._v(" 1.3 AOP")]),e._v(" "),v("p",[v("RouterLink",{attrs:{to:"/java/Spring/aop.html"}},[e._v("aop")])],1),e._v(" "),v("h2",{attrs:{id:"_2-请求管道"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-请求管道"}},[e._v("#")]),e._v(" 2.请求管道")]),e._v(" "),v("p",[v("RouterLink",{attrs:{to:"/java/Spring/java-web.html"}},[e._v("java-web")])],1),e._v(" "),v("p",[v("RouterLink",{attrs:{to:"/java/Spring/auth.html"}},[e._v("auth")])],1),e._v(" "),v("h2",{attrs:{id:"_3-内容处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-内容处理"}},[e._v("#")]),e._v(" 3.内容处理")]),e._v(" "),v("ul",[v("li",[e._v("static resource")]),e._v(" "),v("li",[e._v("json")]),e._v(" "),v("li",[e._v("响应封装")]),e._v(" "),v("li",[e._v("错误封装")]),e._v(" "),v("li",[e._v("国际化")])]),e._v(" "),v("h2",{attrs:{id:"_4-orm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-orm"}},[e._v("#")]),e._v(" 4.ORM")])])}),[],!1,null,null,null);v.default=o.exports}}]);