(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{413:function(a,t,e){"use strict";e.r(t);var s=e(4),n=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("虽然微软从netfx45以后就推荐DiagnosticSource进行可观测性适配，但第三方组件很少主动进行关键路径埋点，在这种情况下通过JIT可以实现无侵入的埋点。这可以认为是一种aop思路，datadog、opentelemetry实现。")]),a._v(" "),t("h2",{attrs:{id:"科普"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#科普"}},[a._v("#")]),a._v(" 科普")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("在不考虑NativeAOT（社区对这个东西意见也比较不一致），源码到运行的两次编译过程\nRoslyn--\x3eCIL（Common Intermediate Language，公共中间语言）\nRuyJit--\x3e编译对应平台的机器码\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/20230515144622.png",alt:"image.png"}})]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("方法注入也一般是发生在这两次编译前后，一个是在 Roslyn 静态编译期间进行方法注入，期间目标 .NET 程序并没有运行，所以这种 .NET 程序未运行的方法注入我们叫它**编译时静态注入**。而在 RuyJit 期间 .NET程序已经在运行，这时进行方法注入我们叫它**运行时动态注入**。\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/20230515145231.png",alt:"image.png"}})]),a._v(" "),t("h3",{attrs:{id:"clr-profile-api-实现apm探针原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clr-profile-api-实现apm探针原理"}},[a._v("#")]),a._v(" CLR Profile API 实现APM探针原理")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("在不考虑 AOT 编译和分层编译特性，一个 .NET 方法一开始的目标地址都会指向 JIT 编译器，当方法开始执行时，先调用 JIT 编译器将 CIL 代码转换为本机代码，然后缓存起来，运行本机代码，后面再次访问这个方法时，都会走缓存以后得本机代码，流程如下所示：\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/20230515151120.png",alt:"image.png"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/20230515145255.png",alt:"image.png"}})]),a._v(" "),t("ol",[t("li",[a._v("Profiler注册：在启动应用程序时，.NET Tracer 作为一个分析器（profiler）向 CLR（Common Language Runtime）注册。这样可以让它在整个应用程序生命周期内监听和操纵执行流程。")]),a._v(" "),t("li",[a._v("JIT编译拦截：当方法被即时编译（JIT）时，Profiler API 发送事件通知。.NET Tracer 捕获这些事件，如JITCompilationStarted，从而有机会在方法被编译之前修改其 IL（Intermediate Language）代码。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);