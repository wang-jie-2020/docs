(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{361:function(t,a,s){"use strict";s.r(a);var e=s(4),v=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"重点笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重点笔记"}},[t._v("#")]),t._v(" 重点笔记")]),t._v(" "),a("h2",{attrs:{id:"基础语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[t._v("#")]),t._v(" 基础语法")]),t._v(" "),a("ol",[a("li",[a("p",[t._v(":=")])]),t._v(" "),a("li",[a("p",[t._v("iota")])]),t._v(" "),a("li",[a("p",[t._v("if")]),t._v(" "),a("p",[t._v("if initialization; condition {}")])]),t._v(" "),a("li",[a("p",[t._v("switch")]),t._v(" "),a("p",[t._v("break ×")]),t._v(" "),a("p",[t._v("continue √")]),t._v(" "),a("p",[t._v("return √")]),t._v(" "),a("p",[t._v("switch 任意类型 | 初始化语句; | 省略")]),t._v(" "),a("p",[t._v("​\tcase 一行一值 | 一行多值 | bool表达式(省略时)")]),t._v(" "),a("p",[t._v("​\t空case 不执行")]),t._v(" "),a("p",[t._v("​\tfallthrough 忽略条件流向下一个")])]),t._v(" "),a("li",[a("p",[t._v("for")])])]),t._v(" "),a("p",[t._v("​\tfor 初始化语句; 条件语句; 修饰语句 {}")]),t._v(" "),a("p",[t._v("​\tfor ix, val := range list { }")]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[t._v("切片、map、chan是引用类型，通过make函数初始化，不必考虑指针")])]),t._v(" "),a("li",[a("p",[t._v("main、init")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/image-20230825154442125.png",alt:"image-20230825154442125"}})]),t._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[t._v("defer")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wang-jie-2020/images/image-20230831175757536.png",alt:"image-20230831175757536"}})]),t._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[t._v("panic 和 recover")])]),t._v(" "),a("p",[a("strong",[t._v("数组和切片")])]),t._v(" "),a("p",[t._v("var identifier [len]type\t 这是数组,数组是值类型")]),t._v(" "),a("p",[t._v("var identifier []type\t\t这是切片,切片是引用类型")]),t._v(" "),a("p",[t._v("s := arr[startIndex:endIndex]\tstartIndex -> endIndex-1")]),t._v(" "),a("p",[t._v("​\tlen() --- 切片的长度")]),t._v(" "),a("p",[t._v("​\tcap() --- 切片的容量,切片的长度 + 数组除切片之外的长度")]),t._v(" "),a("p",[a("strong",[t._v("make() 创建一个切片")])]),t._v(" "),a("p",[t._v("​\tmake([]T, length, capacity)")]),t._v(" "),a("p",[t._v("​\tmake([]int, 50, 100) == new([100]int)[0:50]")]),t._v(" "),a("p",[t._v("append函数、copy函数")]),t._v(" "),a("p",[a("strong",[t._v("Map")])]),t._v(" "),a("p",[t._v("var identifier map[keytype]valuetype\t键值对")]),t._v(" "),a("p",[a("strong",[t._v("make() 创建一个Map")])]),t._v(" "),a("p",[t._v("​\tmake(map[int]string, 10),capacity可以省略")]),t._v(" "),a("h2",{attrs:{id:"结构、方法、接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构、方法、接口"}},[t._v("#")]),t._v(" 结构、方法、接口")]),t._v(" "),a("p",[t._v("对象 = 结构 + 结构方法")]),t._v(" "),a("p",[t._v("结构：普通字段、匿名字段、内嵌结构体---继承")]),t._v(" "),a("p",[t._v("结构方法：接收者类型是结构和结构指针---继承")]),t._v(" "),a("p",[t._v("接口可以被多个类型实现---多态")]),t._v(" "),a("p",[t._v("空接口视作object，类型断言：逗号ok模式、type-switch模式")]),t._v(" "),a("p",[t._v("接口方法：不存在类似结构的自动解指针，必须对应一致")]),t._v(" "),a("h2",{attrs:{id:"★协程和信道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#★协程和信道"}},[t._v("#")]),t._v(" ★协程和信道")]),t._v(" "),a("p",[t._v("协程与线程的关系是M:N：一组协程运行在一些线程上,类似于C#的Task线程池以及线程调度")]),t._v(" "),a("p",[t._v("go routine")]),t._v(" "),a("p",[t._v("信道的发送和接收都是"),a("strong",[t._v("原子")]),t._v("操作,操作符<-")]),t._v(" "),a("p",[t._v("​\tch <- int1")]),t._v(" "),a("p",[t._v("​\tint2 = <- ch")]),t._v(" "),a("p",[t._v("非缓冲信道要求必须两端存在否则阻塞；若不需阻塞行为则定义带缓冲区的信道")]),t._v(" "),a("p",[t._v("ch := make(chan type, value)")]),t._v(" "),a("p",[t._v("通道的方向可以指定,只读或者只写,它是一个语法而不是新的东西")]),t._v(" "),a("p",[t._v("close() 关闭信道,检查状态使用逗号ok模式 v, ok := <-ch，for-range 语句来读取通道是更好的办法，因为这会自动检测通道是否关闭")]),t._v(" "),a("p",[t._v("select 模式切换协程")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" chan1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果chan1成功读到数据，则进行该case处理语句")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" chan2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果成功向chan2写入数据，则进行该case处理语句")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果上面都没有成功，则进入default处理流程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h2",{attrs:{id:"项目结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[t._v("#")]),t._v(" 项目结构")]),t._v(" "),a("p",[t._v("标准的结构是：")]),t._v(" "),a("ul",[a("li",[t._v("bin：存储所编译生成的二进制文件。")]),t._v(" "),a("li",[t._v("pkg：存储预编译的目标文件，以加快程序的后续编译速度。")]),t._v(" "),a("li",[t._v("src：存储所有.go文件或源代码")])]),t._v(" "),a("p",[t._v("GOPATH模式已经不适合，但拉取外部依赖会自动下载并安装到"),a("code",[t._v("$GOPATH")]),t._v("目录下。")]),t._v(" "),a("p",[t._v("Go modules模式")]),t._v(" "),a("p",[t._v("GOPROXY & GOPRIVATE（私有的库不能通过Proxy拉到的）")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("go "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-w")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("GOPROXY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https://goproxy.cn,https://mirrors.aliyun.com/goproxy/,direct\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("go "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-w")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("GOPRIVATE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.example.com"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("一个前提知识是很多Go的包都是在github上，如果不能代理包，direct字会导向源")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("go mod init")]),t._v(" "),a("td",[t._v("生成 go.mod 文件")])]),t._v(" "),a("tr",[a("td",[t._v("go mod download")]),t._v(" "),a("td",[t._v("下载 go.mod 文件中指明的所有依赖")])]),t._v(" "),a("tr",[a("td",[t._v("go mod tidy")]),t._v(" "),a("td",[t._v("整理现有的依赖")])]),t._v(" "),a("tr",[a("td",[t._v("go mod graph")]),t._v(" "),a("td",[t._v("查看现有的依赖结构")])]),t._v(" "),a("tr",[a("td",[t._v("go mod edit")]),t._v(" "),a("td",[t._v("编辑 go.mod 文件")])]),t._v(" "),a("tr",[a("td",[t._v("go mod vendor")]),t._v(" "),a("td",[t._v("导出项目所有的依赖到vendor目录")])]),t._v(" "),a("tr",[a("td",[t._v("go mod verify")]),t._v(" "),a("td",[t._v("校验一个模块是否被篡改过")])]),t._v(" "),a("tr",[a("td",[t._v("go mod why")]),t._v(" "),a("td",[t._v("查看为什么需要依赖某模块")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.指定当前项目module，虽然自定义module以github.com开头实际上仍然指向的当前本地的module")]),t._v("\ngo mod init github.com/xxxx/yyyy\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.go get 包")]),t._v("\ngo get github.com/aaaa/bbbb\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3.替换包")]),t._v("\ngo mod edit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-replace")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("zinx@v1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("zxin@v2\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])])}),[],!1,null,null,null);a.default=v.exports}}]);