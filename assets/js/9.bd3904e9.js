(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{292:function(e,t,v){"use strict";v.r(t);var _=v(1),a=Object(_.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[e._v("#")]),e._v(" map")]),e._v(" "),t("p",[t("code",[e._v("map")]),e._v("声明 "),t("code",[e._v("var identimier map[keytype]valuetype")])]),e._v(" "),t("p",[e._v("map是引用类型,未初始化的map的值是nil")]),e._v(" "),t("p",[e._v("​\t"),t("code",[e._v("var mapLit map[string]int")]),e._v(" "),t("code",[e._v('mapLit = map[string]int{"one": 1, "two": 2}')])]),e._v(" "),t("p",[e._v("​\t"),t("code",[e._v("mapCreated := make(map[string]float32)")])]),e._v(" "),t("blockquote",[t("p",[e._v("key 可以是任意可以用 "),t("code",[e._v("==")]),e._v(" 或者 "),t("code",[e._v("!=")]),e._v(" 操作符比较的类型，比如 "),t("code",[e._v("string")]),e._v("、"),t("code",[e._v("int")]),e._v("、"),t("code",[e._v("float32(64)")]),e._v("。所以数组、切片和结构体不能作为 key (译者注：含有数组切片的结构体不能作为 key，只包含内建类型的 "),t("code",[e._v("struct")]),e._v(" 是可以作为 key 的），但是指针和接口类型可以。如果要用结构体作为 key 可以提供 "),t("code",[e._v("Key()")]),e._v(" 和 "),t("code",[e._v("Hash()")]),e._v(" 方法，这样可以通过结构体的域计算出唯一的数字或者字符串的 key。")]),e._v(" "),t("p",[e._v("value 可以是任意类型的；通过使用空接口类型（详见"),t("a",{attrs:{href:"https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/11.9.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("第 11.9 节"),t("OutboundLink")],1),e._v("），我们可以存储任意值，但是使用这种类型作为值时需要先做一次类型断言")])]),e._v(" "),t("p",[e._v("例8.4 maps_forrange2.go  有疑问")]),e._v(" "),t("p",[e._v("map是无序的")])])}),[],!1,null,null,null);t.default=a.exports}}]);